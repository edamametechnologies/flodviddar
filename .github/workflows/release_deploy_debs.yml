name: Build and publish for linux debs

on:
  workflow_dispatch:

# Auto cancel previous runs if they were not completed.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# Write permissions are required to upload the release asset.
permissions: write-all

jobs:
  build:
    runs-on: ${{ matrix.os }}-latest

    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu
            arch: i386
            target: i686-unknown-linux-gnu
            deb_arch: i386
          - os: ubuntu
            arch: armhf
            target: armv7-unknown-linux-gnueabihf
            deb_arch: armhf
          - os: ubuntu
            arch: amd64
            target: x86_64-unknown-linux-gnu
            deb_arch: amd64
          - os: ubuntu
            arch: aarch64
            target: aarch64-unknown-linux-gnu
            deb_arch: arm64

    env:
      # Required for cross to not show warnings and fail
      CROSS_NO_WARNINGS: 0

    steps:
      - name: Setup EDAMAME Posture
        uses: edamametechnologies/edamame_posture_action@v0
        with:
          edamame_user: ${{ vars.EDAMAME_POSTURE_USER }}
          edamame_domain: ${{ vars.EDAMAME_POSTURE_DOMAIN }}
          edamame_pin: ${{ secrets.EDAMAME_POSTURE_PIN }}
          edamame_id: ${{ github.run_id }}
          network_scan: true
          auto_remediate: true
          checkout: true
          # We are using the token of the private repo to checkout the public repo and properly wait for access to the private repo
          token: ${{ secrets.DEV_GITHUB_TOKEN }}
          wait_for_api: true
          wait_for_https: true

      ############################################################################################
      # Setup
      ############################################################################################

      # Install Rust
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Install Cross for Linux
      - name: Install Cross for Linux
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Write Cross.toml for system deps
        run: |
          cat > Cross.toml <<'EOF'
          [build]
          pre-build = [
          "dpkg --add-architecture $CROSS_DEB_ARCH",
          "apt-get update && apt-get install -y --no-install-recommends libpcap-dev:$CROSS_DEB_ARCH"
          ]
          EOF

      ############################################################################################
      # Build
      ############################################################################################

      # Build application for Linux using cross
      - name: Build application for Linux using cross
        run: |
          cross build --release --target ${{ matrix.target }}
          # Copy the binary to the standard release folder
          mkdir -p target/release
          cp target/${{ matrix.target }}/release/flodviddar target/release/flodviddar

      ############################################################################################
      # Release
      ############################################################################################

      # Main only
      - name: Check for existing release
        if: github.ref == 'refs/heads/main'
        id: get_release
        shell: bash
        run: |
          VERSION=$(grep '^version =' ./Cargo.toml | awk '{print $3}' | tr -d '"')
          echo "::set-output name=version::$VERSION"
          VERSION_TAG=v${VERSION}
          echo "::set-output name=tag::$VERSION_TAG"
          if [[ -n "$(gh release view $VERSION_TAG --repo ${{ github.repository }} --json id -q .id)" ]]; then
            echo "::set-output name=exists::true"
            echo "::set-output name=upload_url::$(gh release view $VERSION_TAG --json uploadUrl -q .uploadUrl )"
          else
            echo "::set-output name=exists::false"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Update the tag if it exists and points to a different commit
      - name: Update the tag if it exists and points to a different commit
        if: github.ref == 'refs/heads/main' && steps.get_release.outputs.exists == 'true'
        run: |
          gh release edit ${{ steps.get_release.outputs.tag }} --repo ${{ github.repository }} --target ${{ github.sha }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Main only
      - name: Create release if it doesn't exist
        if: github.ref == 'refs/heads/main' && steps.get_release.outputs.exists != 'true'
        # This populates steps.get_release.outputs.upload_url with the upload_url of the release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_release.outputs.tag }}
          release_name: Release ${{ steps.get_release.outputs.tag }}
          draft: false
          prerelease: false

      # Main only
      - name: Upload asset to release
        if: github.ref == 'refs/heads/main'
        # Supports overwrite
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ steps.get_release.outputs.exists == 'true' && steps.get_release.outputs.upload_url || steps.create_release.outputs.upload_url }}
          # Path to the release for each target triplet
          asset_path: target/${{ matrix.target }}/release/flodviddar${{ matrix.os == 'windows' && '.exe' || '' }}
          asset_name: flodviddar-${{ steps.get_release.outputs.version }}-${{ matrix.target }}${{ matrix.os == 'windows' && '.exe' || '' }}
          asset_content_type: application/octet-stream
          overwrite: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload .deb asset to release
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ steps.get_release.outputs.exists == 'true' && steps.get_release.outputs.upload_url || steps.create_release.outputs.upload_url }}
          asset_path: target/${{ matrix.target }}/debian/flodviddar_${{ steps.get_release.outputs.version }}-1_${{ matrix.deb_arch }}.deb
          asset_name: flodviddar_${{ steps.get_release.outputs.version }}-1_${{ matrix.deb_arch }}.deb
          asset_content_type: application/vnd.debian.binary-package
          overwrite: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
