name: Test of the project

on:
  pull_request:
    branches: ["*"]

jobs:
  create_whitelist:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      CAPTURE_SECS: ${{ inputs.capture_seconds || '120' }}

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🦀 Install Rust (nightly)
        uses: dtolnay/rust-toolchain@nightly

      - name: 🧰 System deps (pcap, tmux, jq)
        run: |
          sudo apt-get update
          sudo apt-get install -y libpcap-dev tmux jq

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: ⚙️ Build sniffer (release)
        run: cargo build --release

      - name: 🔎 Find built binary path
        id: bin
        shell: bash
        run: |
          set -euo pipefail
          meta_json="$(cargo metadata --no-deps --format-version=1)"
          bin_name="$(jq -r '.packages[0].targets[] | select(.kind[] | contains("bin")) | .name' <<<"$meta_json" | head -n1)"
          if [[ -z "$bin_name" ]]; then
            echo "Couldn't infer binary name. Ensure this repo builds a binary target." >&2
            exit 1
          fi
          bin_path="target/release/$bin_name"
          [[ -x "$bin_path" ]] || { echo "Not found: $bin_path"; ls -la target/release; exit 1; }
          echo "name=$bin_name" >> "$GITHUB_OUTPUT"
          echo "path=$bin_path" >> "$GITHUB_OUTPUT"

      - name: ✍️ Create legitimate build script
        run: |
          cat > build.py << 'EOF'
          import subprocess
          import sys
          import requests

          print(f"Python version: {sys.version}")
          print("Downloading requests library info from PyPI…")
          response = requests.get("https://pypi.org/pypi/requests/json", timeout=10)
          print(f"Downloaded PyPI info: {response.status_code}")
          subprocess.run(["pip", "list"], check=False)
          print("Build completed successfully!")
          EOF

      - name: 🎯 Start capture and generate traffic
        shell: bash
        run: |
          set -euo pipefail

          # 1) Start the listener in tmux (run as root so it can open raw sockets)
          tmux kill-session -t whitelist 2>/dev/null || true
          tmux new-session -d -s whitelist \
            "sudo -E '${{ steps.bin.outputs.path }}' create-whitelist 120 \
              --file runner-ubuntu-whitelist.json > whitelist.log 2>&1"

          # 2) Give it time to bind
          sleep 5

          # 3) Do the traffic you actually want whitelisted (during capture!)
          python -m pip install --no-input requests
          python build.py
          ping -w 15 google.com || true

          # 4) Wait for capture to finish
          echo "Waiting for listener to finish (up to 120s + grace)…"
          timeout "$(( 120 + 30 ))" bash -c 'while tmux has-session -t whitelist 2>/dev/null; do sleep 1; done' || true
          tmux kill-session -t whitelist 2>/dev/null || true

      - name: 📄 Show generated whitelist & listener log
        run: |
          echo "=== runner-ubuntu-whitelist.json ==="
          test -f runner-ubuntu-whitelist.json && cat runner-ubuntu-whitelist.json || echo "(not created)"
          echo
          echo "=== whitelist.log ==="
          test -f whitelist.log && tail -n +1 whitelist.log || echo "(no logs)"

      # - name: 🐍 Create malicious build script
      #   run: |
      #     cat > build_malicious.py << 'EOF'
      #     import subprocess, sys, requests

      #     print(f"Python version: {sys.version}")
      #     print("Attempting to fetch malicious payload from gist.githubusercontent.com…")
      #     resp = requests.get(
      #       "https://gist.githubusercontent.com/gewashington/a4d0211e6f8601b69ff74e30d9e3ca20/raw/9d3e37cf7742b41e39606e70aab7a4f971353749/practice-python-fibonnaci.py"
      #     )
      #     print(f"Got {resp.status_code}")
      #     subprocess.run(["pip", "list"])
      #     print("Build (malicious) completed!")
      #     EOF

      # - name: 🏴‍☠️ Run malicious build script
      #   run: python build_malicious.py

    # test_halt:
    #   runs-on: ubuntu-latest
    #   permissions:
    #     actions: write
    #     contents: read
    #   env:
    #     GH_TOKEN: ${{ github.token }}
    #   steps:
    #     - name: Install Rust toolchain
    #       uses: dtolnay/rust-toolchain@nightly

    #     - name: Install dependencies (pcap + tmux)
    #       run: |
    #         sudo apt-get update
    #         sudo apt-get install -y libpcap-dev tmux

    #     - name: 📦 Checkout code
    #       uses: actions/checkout@v3
    #     - name: ⚙️ Build your release binary
    #       run: |
    #         cargo run --release halt "Build blocked by security policy"
