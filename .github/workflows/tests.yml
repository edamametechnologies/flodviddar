name: Test of the project

on:
  pull_request:
    branches: ["*"]

jobs:
  enforce:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      DURATION: ${{ inputs.duration || '120' }}
      BIN: target/release/flodviddar
      WL: whitelist.json # make sure this file exists in the repo
      GH_TOKEN: ${{ github.token }}
    permissions:
      actions: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@nightly

      - name: System deps (pcap)
        run: |
          sudo apt-get update
          sudo apt-get install -y libpcap-dev

      - name: Build watcher binary
        run: cargo build --release

      - name: Create legitimate build script
        run: |
          cat > build.py << 'EOF'
          import subprocess, sys, requests
          print(f"Python version: {sys.version}")
          print("Downloading requests metadata from PyPI‚Ä¶")
          r = requests.get("https://pypi.org/pypi/requests/json", timeout=10)
          print("Status:", r.status_code)
          subprocess.run(["python", "-m", "pip", "list"], check=False)
          print("Legit build completed.")
          EOF

      - name: Create malicious build script (simulating CVE-2025-30066)
        run: |
          cat > build_malicious.py << 'EOF'
          import subprocess, sys, requests
          print(f"Python version: {sys.version}")
          print("Attempting to fetch from gist.githubusercontent.com‚Ä¶")
          try:
              url = "https://gist.githubusercontent.com/gewashington/a4d0211e6f8601b69ff74e30d9e3ca20/raw/9d3e37cf7742b41e39606e70aab7a4f971353749/practice-python-fibonnaci.py"
              resp = requests.get(url, timeout=10)
              print("Malicious fetch status:", resp.status_code)
          except Exception as e:
              print("Error during malicious fetch:", e)
          subprocess.run(["python", "-m", "pip", "list"], check=False)
          print("Malicious build completed.")
          EOF

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Run workload under watcher (auto-fails on violation)
        shell: bash
        run: |
          set -euo pipefail
          [[ -f "$WL" ]] || { echo "::error file=$WL::Whitelist file not found"; exit 1; }

          # Start watcher (no API cancel; it exits non-zero on violation)
          "$BIN" watch "$DURATION" --custom-whitelist "$WL" --no-cancel > watch.log 2>&1 & WATCH=$!

          # Start the "build" workload
          (
            python -m pip install --no-input requests
            python build.py
            python build_malicious.py
          ) & TASKS=$!

          # Wait for whichever finishes first, then act accordingly
          set +e
          wait -n "$WATCH" "$TASKS"
          first_status=$?
          set -e

          if ps -p "$WATCH" > /dev/null; then
            echo "‚úÖ Workload finished before watcher; stopping watcher."
            kill -TERM "$WATCH" 2>/dev/null || true
            wait "$WATCH" || true
          else
            echo "‚ùå Watcher exited early ‚Äî likely off-whitelist egress detected."
            # Stop workload quickly and fail the job
            kill -TERM "$TASKS" 2>/dev/null || true
            sleep 1
            kill -KILL "$TASKS" 2>/dev/null || true
            echo "---- watch.log (last 100 lines) ----"
            tail -n 100 watch.log || true
            exit 1
          fi

      - name: Step summary
        if: always()
        run: |
          {
            echo "## Whitelist enforcement run"
            echo "- Duration: $DURATION s"
            echo "- Whitelist: \`$WL\`"
            echo ""
            echo "<details><summary>watch.log (tail)</summary>"
            echo
            (test -f watch.log && tail -n 100 watch.log) || echo "(no watch.log)"
            echo
            echo "</details>"
          } >> "$GITHUB_STEP_SUMMARY"

    # test_halt:
    #   runs-on: ubuntu-latest
    #   permissions:
    #     actions: write
    #     contents: read
    #   env:
    #     GH_TOKEN: ${{ github.token }}
    #   steps:
    #     - name: Install Rust toolchain
    #       uses: dtolnay/rust-toolchain@nightly

    #     - name: Install dependencies (pcap + tmux)
    #       run: |
    #         sudo apt-get update
    #         sudo apt-get install -y libpcap-dev tmux

    #     - name: üì¶ Checkout code
    #       uses: actions/checkout@v3
    #     - name: ‚öôÔ∏è Build your release binary
    #       run: |
    #         cargo run --release halt "Build blocked by security policy"
