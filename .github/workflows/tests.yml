name: Test of the project

on:
  pull_request:
    branches: ["*"]

jobs:
  create_whitelist:
    runs-on: ubuntu-latest

    steps:
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly

      - name: Install dependencies (pcap + tmux)
        run: |
          sudo apt-get update
          sudo apt-get install -y libpcap-dev tmux

      - name: 📦 Checkout code
        uses: actions/checkout@v3

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: ⚙️ Build your release binary
        run: |
          cargo build --release

      - name: ✍️ Create legitimate build script
        run: |
          cat > build.py << 'EOF'
          import subprocess
          import sys
          import requests

          # Print Python version (legitimate action)
          print(f"Python version: {sys.version}")

          # Download a legitimate dependency (from PyPI)
          print("Downloading requests library info from PyPI...")
          response = requests.get("https://pypi.org/pypi/requests/json")
          print(f"Downloaded PyPI info: {response.status_code}")

          # Run pip list (legitimate action)
          subprocess.run(["pip", "list"])

          print("Build completed successfully!")
          EOF

      - name: 🐍 Install Python deps
        run: pip install requests

      - name: 🎯 Generate the custom whitelist via tmux
        run: |
          # 1) Start listener in a detached tmux session for 120 s
          tmux new-session -d -s whitelist \
            "cargo run --release create-whitelist 120 --file runner-ubuntu-whitelist.json"

          # 2) Give it a moment to bind its socket
          sleep 5

          # 3) Run your “legitimate” build to produce baseline traffic
          python build.py

          # 4) Wait out the full 120 s capture window
          echo "Waiting for listener to finish capturing (up to 120 s total)…"
          sleep 120

          # 5) (optional) grab tmux output for debugging
          tmux capture-pane -pt whitelist > listener.log

          # 6) Tear down the tmux session
          tmux kill-session -t whitelist || true

      - name: 📄 Show generated whitelist & listener log
        run: |
          echo "=== runner-ubuntu-whitelist.json ==="
          cat runner-ubuntu-whitelist.json || echo "(empty)"
          echo
          echo "=== listener.log ==="
          cat listener.log || echo "(no logs)"
      # - name: 🐍 Create malicious build script
      #   run: |
      #     cat > build_malicious.py << 'EOF'
      #     import subprocess, sys, requests

      #     print(f"Python version: {sys.version}")
      #     print("Attempting to fetch malicious payload from gist.githubusercontent.com…")
      #     resp = requests.get(
      #       "https://gist.githubusercontent.com/gewashington/a4d0211e6f8601b69ff74e30d9e3ca20/raw/9d3e37cf7742b41e39606e70aab7a4f971353749/practice-python-fibonnaci.py"
      #     )
      #     print(f"Got {resp.status_code}")
      #     subprocess.run(["pip", "list"])
      #     print("Build (malicious) completed!")
      #     EOF

      # - name: 🏴‍☠️ Run malicious build script
      #   run: python build_malicious.py
